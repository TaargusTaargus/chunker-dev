#!/usr/bin/python
from manager import UploadManager, DownloadManager
from storage import Storage
from db import ChunkDB, UserDB
from auth import Authorizer
from warnings import simplefilter
from os.path import isfile
from sys import argv
from utilities import format_path
from multiprocessing import cpu_count
from state import flags
from chunker import Launcher
 
def usage(): 
  print( '''
               COMMANDS: 

               chunker init

               chunker upload [OPTIONS...] DIR

               chunker download [OPTIONS...] DIR

               chunker purge DIR

               chunker list DIR

               chunker help COMMAND


              GENERAL OPTIONS:)
                -m db
                  specify the database file that chunker should use
                -v, --verbose
                  more verbose output from chunk 
                -t # of threads
                  request threading with specified number of threads


              UPLOAD ONLY OPTIONS:
                -e, --encrypt
                  enable encryption
                -s size
                  chunk all files within [size] byte chunks
                -f, --force
                  forces  reupload
								
     ''' )


def upload_usage():
  print( '''
              Usage: chunker upload [OPTIONS...] DIR
            
              Command to chunk all files in a given directory

              [DIR]        - directory to be chunked
         ''' )


def download_usage():
  print( '''
              Usage: chunker download [OPTIONS...] DIR

              Command to unchunk all files of a given directory

              [DIR]        - directory to be restored ( use '/' to restore all directories ) 
         ''' )


def list_usage():
  print( '''
              Usage: chunker list DIR

              Command to list chunked files within a chunker database 

              [DIR]        - directory path to check files under ( '/' checks all files )
         ''' )


def help_usage():
  print( '''
              Usage: chunker help COMMAND

              Command to receive help on using a particular command

              [COMMAND]   - command to be explained
         ''' )


def init_usage():
  print( '''
              Usage: chunker init
           
              Command to add a new user Drive to the pool of available storage space
         ''' )


def purge_usage():
  print( '''
              Usage: chunker purge DIR

              Command to purge all uploaded chunks and entries in chunker database under and including listed directory
 
              [DIR]      - directory to purge
         ''' )


simplefilter( "ignore" )
argc = len( argv )
if argc == 1:
  usage()
  exit( 0 )

mode = argv[ 1 ]
if mode not in [ 'purge', 'init', 'download', 'upload', 'list', 'help' ]:
  usage()
  exit( 0 )

flags[ 'chunk_size' ] = 10000000

options = {}
options[ 'database_name' ] = None
options[ 'thread_count' ] = cpu_count()
options[ 'work_dir' ] = format_path( argv[ -1 ] )

if '-v' in argv or '--verbose' in argv:
  flags[ 'verbose_flag' ] = True
  argc -= 1

if '-m' in argv:
  database_name = argv[ argv.index( '-m' ) + 1 ]
  argc -= 2

if '-t' in argv:
  options[ 'thread_count' ] = int( argv[ argv.index( '-t' ) + 1 ] )
  argc -= 2

if mode == 'upload':

  if '-s' in argv:
    flags[ 'chunk_size' ] = int( argv[ argv.index( '-s' ) + 1 ] )
    argc -= 2
  
  if '-e' in argv or '--encrypt' in argv:
    flags[ 'encrypt_flag' ] = True
    argc -= 1

  if '-f' in argv or '--force' in argv:
    flags[ 'force_flag' ] = True
    argc -= 1

if options[ 'thread_count' ] > cpu_count():
  print( "WARNING: thread count higher than available cores (" + str( cpu_count() ) + "), might cause slowdown ... " )

if argc < 3 and mode == 'upload':
  upload_usage() 
  exit()

if argc < 3 and mode == 'download':
  download_usage() 
  exit()

if argc != 3 and mode == 'list':
  list_usage() 
  exit()

if argc != 3 and mode == 'help':
  help_usage()
  exit()

if argc != 2 and mode == 'init':
  init_usage()
  exit()

if argc != 3 and mode == 'purge':
  purge_usage()
  exit()


if mode == 'help':
  command = argv[ -1 ]
  if command == 'upload':
    upload_usage()
  elif command == 'download':
    download_usage()
  elif command == 'init':
    init_usage()
  elif command == 'list':
    list_usage()
  elif command == 'help':
    help_usage()
  elif command == 'purge':
    purge_usage()
  else:
    print( 'unknown command ...' )
  exit()

launcher = Launcher( options )

if mode == 'init':
  launcher.init()

elif mode == 'upload' or mode == 'download': 
  if flags[ 'verbose_flag' ]:
    print( 'connecting to storage service ' + storage_mode + ' ...' )
   
  if flags[ 'verbose_flag' ]:
    print( 'creating ' + mode + 'ing service ...' )
 
  if mode == 'upload':
    launcher.upload()
    #uploader = UploadManager( database_name, thread_count )
    #uploader.upload( argv[ -1 ] )
  else: 
    launcher.download()
    #downloader = DownloadManager( database_name, thread_count )  
    #downloader.download( argv[ -1 ]  )

elif mode == 'purge':
  launcher.purge()

#if user wants to list chunked files
elif mode == 'list':
  launcher.list()
  #UserDB().list_users()
  #ChunkDB( database_name ).list_files( format_path( argv[ -1 ] ) )
